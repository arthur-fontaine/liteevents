// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.819
package views

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func Dashboard() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div x-data=\"dashboard()\" class=\"space-y-8\"><div class=\"bg-white p-6 rounded-lg shadow\"><div class=\"mb-4\"><label class=\"block text-sm font-medium text-gray-700\">Namespace Filter</label> <select x-model=\"currentNamespace\" @change=\"changeNamespace()\" class=\"mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md\"><option value=\"\">All Namespaces</option><template x-for=\"ns in namespaces\"><option :value=\"ns\" x-text=\"ns\"></option></template></select></div><canvas id=\"eventChart\"></canvas></div><div class=\"bg-white p-6 rounded-lg shadow\"><h2 class=\"text-xl font-bold mb-4\">Recent Events</h2><div class=\"space-y-4\"><template x-for=\"event in events\"><div class=\"border-b py-2\"><div class=\"flex justify-between\"><div><span x-text=\"event.type\" class=\"font-semibold\"></span> <span class=\"text-sm text-gray-500\" x-text=\"&#39;[&#39; + event.namespace + &#39;]&#39;\"></span></div><div x-text=\"new Date(event.created_at).toLocaleString()\" class=\"text-sm text-gray-600\"></div></div></div></template></div><button @click=\"loadMore\" x-show=\"hasMore\" class=\"mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\">Load More</button></div></div><script>\n            function dashboard() {\n                return {\n                    events: [],\n                    hasMore: true,\n                    page: 1,\n                    chart: null,\n                    socket: null,\n                    namespaces: new Set(),\n                    currentNamespace: \"\",\n                    eventCounts: {},\n\n                    init() {\n                        this.initWebSocket()\n                        this.initChart()\n                        this.loadEvents()\n                    },\n\n                    initWebSocket() {\n                        this.socket = new WebSocket(`ws://${window.location.host}/ws`)\n                        this.socket.onmessage = (event) => {\n                            const newEvent = JSON.parse(event.data)\n                            this.events.unshift(newEvent)\n                            this.updateChart(newEvent)\n                        }\n                    },\n\n                    initChart() {\n                        const ctx = document.getElementById('eventChart')\n                        this.chart = new Chart(ctx, {\n                            type: 'line',\n                            data: {\n                                labels: [],\n                                datasets: [{\n                                    label: 'Events per minute',\n                                    data: []\n                                }]\n                            },\n                            options: {\n                                scales: {\n                                    y: { beginAtZero: true }\n                                }\n                            }\n                        })\n                    },\n\n                    loadEvents() {\n                        fetch(`/api/events?page=${this.page}&namespace=${this.currentNamespace}`)\n                            .then(response => response.json())\n                            .then(data => {\n                                this.events.push(...data.events)\n                                this.hasMore = data.has_more\n                                data.events.forEach(event => {\n                                    this.namespaces.add(event.namespace)\n                                })\n                                this.page++\n                            })\n                    },\n\n                    loadMore() {\n                        this.loadEvents()\n                    },\n\n                    changeNamespace() {\n                        this.events = []\n                        this.page = 1\n                        this.loadEvents()\n                    },\n\n                    updateChart(event) {\n                        const now = new Date();\n                        const minute = new Date(now.setSeconds(0, 0)).getTime();\n                        \n                        // Initialize if not exists\n                        if (!this.eventCounts[minute]) {\n                            this.eventCounts[minute] = 0;\n                        }\n                        \n                        this.eventCounts[minute]++;\n                        \n                        // Keep only last 30 minutes\n                        const thirtyMinutesAgo = minute - (30 * 60 * 1000);\n                        Object.keys(this.eventCounts).forEach(key => {\n                            if (parseInt(key) < thirtyMinutesAgo) {\n                                delete this.eventCounts[key];\n                            }\n                        });\n                        \n                        // Update chart\n                        const sortedTimes = Object.keys(this.eventCounts).sort();\n                        this.chart.data.labels = sortedTimes.map(t => \n                            new Date(parseInt(t)).toLocaleTimeString()\n                        );\n                        this.chart.data.datasets[0].data = sortedTimes.map(t => \n                            this.eventCounts[t]\n                        );\n                        \n                        this.chart.update();\n                    }\n                }\n            }\n        </script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = Layout().Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
